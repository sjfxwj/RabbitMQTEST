RabbitMQ                消息队列
Python中的QUEUE是一样的,都是队列

Python中的两种队列:
threading QUEUE:仅限于不同线程之间进行数据交互,不能跨进程进行通信.
进程QUEUE:仅限于父进程与子进程进行数据交互,或者同属于同一父进程下的多个子进程
之间进行数据交互,同样不能跨进程进行通信.
即两个不同的Python程序是不能利用进程QUQUE进行交互通信的.


问题?如果我们要在各种不同的语言、各个独立的进程之间以生产者、消费者这种队列的模式进行
数据通信怎么办呢?==>RabbitMQ


broker:消息的中间商、代理商,如RabbitMq、ActiveMQ等.

https://www.cnblogs.com/alex3714/p/5248247.html ==> Gevent

RabbitMq是用erlang语言进行开发的.


服务启动:service rabbitmq-server start/stop


celery:分布式异步队列


RabbitMQ内部实际上是维护很多队列的,

def callback(ch,method,properties,body):  #回调函数
    print("-->",ch,method,properties)

ch为管道的内存对象地址:**
<BlockingChannel impl=<Channel number=1 OPEN conn=<SelectConnection OPEN socket=('127.0.0.1', 38530)->('127.0.0.1', 5672) params=<ConnectionParameters host=localhost port=5672 virtual_host=/ ssl=False>>>>

method:消息发给谁,发给哪个Queue等基本信息
<Basic.Deliver(['consumer_tag=ctag1.e608b73ec97c4504accc7c3295613adb', 'delivery_tag=3', 'exchange=', 'redelivered=False', 'routing_key=hello'])>

#下面还用不到:
<BasicProperties>

问题:假设现在服务端的队列queue里面还有一条消息,但是还没有被客户端处理,结果服务端宕机了,消息还存在吗?
[root@hadoop11 examp2]# rabbitmqctl list_queues
Listing queues ...
Error: unable to connect to node rabbit@hadoop11: nodedown

DIAGNOSTICS
===========

attempted to contact: [rabbit@hadoop11]

rabbit@hadoop11:
  * connected to epmd (port 4369) on hadoop11
  * epmd reports: node 'rabbit' not running at all
                  no other nodes on hadoop11
  * suggestion: start the node

current node details:
- node name: rabbitmqctl5765@hadoop11
- home dir: /var/lib/rabbitmq
- cookie hash: +66gGlN81XIsUi+E7nKg8g==


结果:[root@hadoop11 examp2]# rabbitmqctl list_queues
Listing queues ...
...done.

服务端rabbitmq里面的消息直接没了...

结果:queue没了,消息直接丢失,怎么办呢??===>
强制将消息里面的东西进行持久化,确保rabbitmq将队列永远的保存着.
[root@hadoop11 examp2]# rabbitmqctl list_queues
Listing queues ...
hello3  0
...done.

持久化之后,带我们将服务重新启动之后,队列还在,但是消息却没了。
durable只是将队列持久化了,但是队列里面的消息却没了.

问题:默认情况下rabbitmq进行任务公平的分发,如何设置负载均衡当中的权重呢?
多大的本事就干多少活?

机制:服务端给客户端发送消息的时候,先检查一下客户端现在还有多少条消息,如果积累的消息超过1,
则不给其发送消息,如果没有消息,则发送消息,在消费者端加上下面一句话即可.
channel.basic_qos(prefetch_count=1)    #预取的数量是1
channel.basic_consume( #消费消息
                      callback,        #如果收到消息,就调用callback回调函数来处理消息.
                      queue='hello3',  #从哪个队列里面收消息
                      #no_ack=True     #先忽略 no acknowledgement(不管消息,消费者处理完了,还是没有处理完毕,都不会和生产者进行确认.),RabbitMq默认消息处理完毕之后,不会进行消息的确认,需要通过ch.basic_ack(delivery_tag=method.delivery_tag)进行确认.
                      )

之前的效果都是1对1的发送,如何做到广播的效果呢?即生产者发送一条消息,所有的消费者都能收到?
**exchange的类型决定了消息最终被怎样的处理,消息是怎么样被处理的**.(消息转发器)
An exchange is a very simple thing. On one side it receives messages
from producers and the other side it pushes them to queues. The exchange
must know exactly what to do with a message it receives. Should it be
appended to a particular queue? Should it be appended to many queues?
Or should it get discarded. The rules for that are defined by the exchange type.

====>exchange===>queue

rabbitmq的内部可以有很多的exchange.

fanout: 所有bind到此exchange的queue都可以接收消息,纯广播,所有绑定到exchange的都可以接受消息.

原理:Queue与exchange进行绑定,生产者将消息发送到Exchange,随后Exchange将遍历一下绑定它的Queue,
然后将消息依次发送到Queue里面,随后消费者从Queue里面接受消息并进行消费.
注意:exchange并不会将消息直接发送给消费者,消费者只会从Queue里面取消息.

exchange类似于广播,是实时的,一旦发送消息,就什么也不管了.===>订阅与发布.(收音机的模型)

如何有选择性的接受消息呢?==>即接受者可以进行消息的过滤,只收自己想要的消息.===>模式(direct)



之前我们是通过对消息的级别对消息进行的区分,如何做到更细粒度的区分呢?比如对info进行更细粒度的划分呢?
==>即对应用程序级别进行区分呢?
*.*.rabbit:所有已rabbit结尾的   lazy.#:所有已lazy开头的  ==>动态的过滤

topic:所有符合routingKey(此时可以是一个表达式)的routingKey所bind的queue可以接收消息

　　 表达式符号说明：#代表一个或多个字符，*代表任何字符
      例：#.a会匹配a.a，aa.a，aaa.a等
          *.a会匹配a.a，b.a，c.a等
     注：使用RoutingKey为#，Exchange Type为topic的时候相当于使用fanout　====>

     这里面有一个想收服务器端所有的广播怎么办呢? #代表一个或多个字符 python consumer.py #


     Server(服务端)=======>客户端(如何让客户端将结果返回呢?现在只是执行结果.)
            服务区<=======结果 ?? ===> 都是生产者和消费者即可.
     解释:如果我给远程的机器发一条命令,这条机器执行完命令之后并将结果返回,这种模式叫做RPC通信机制.
     remote procedure call:远程调用一个方法进行执行.
     发一条指令===>远程方法执行==>返回相应的结果.


我发了一个消息给客户端,每过一段时间去检查消息,如果没有消息我就去干点别的事情,一会过来之后
在进行检查.**如果想不阻塞,每过一段时间就过来检查一次,就不能用start..consumer了,而是用
self.connection.process_data_events()** #非阻塞半的start_consumer。。。

机制:生产者发送了一个命令给消费者,而且不知道消费者什么时候返回消息的运行结果,但是它在一直去收消息,
但是在收结果的同时生产者又不想进入阻塞模式,（每过一会过来收一下消息）,如果消息接收到,代表消息已经接受完毕.
如何判断消息已经收过来了呢?


服务器端: 第一:接受消息,第二:将消息进行返回.

???如何让客户端在给服务端发送消息的时候,同时带一个新的参数呢?(不是写在消息的里面.)
可以在发消息的同时带有其他参数,但是和消息本身是没有关系的。
{
   body：消息
   reply: abc  客户端在给服务端发送消息的时候,只需要在加上一个参数即可.
}




































